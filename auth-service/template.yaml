AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  auth-service

  Sample SAM Template for auth-service

Parameters:
  MainDomain:
    Type: String
  Route53ZoneId:
    Type: String
  EnvDevDomain:
    Type: String
    Default: ""
  SubDomain:
    Type: String
    Default: "api.v2.auth."

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 1
    MemorySize: 512
    Tracing: Active
    Environment:
      Variables:
        DEV_DOMAIN: !Ref EnvDevDomain
  Api:
    TracingEnabled: true

Resources:
  FirebaseTokenAuthorizer:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub ${AWS::StackName}-FirebaseTokenAuthorizer
      CodeUri: ./app
      Handler: bootstrap
      Runtime: provided.al2
      Role: !GetAtt LambdaFunctionRole.Arn
      Architectures:
        - arm64

  UserAppTokenAuthorizer:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UserAppTokenAuthorizer
      CodeUri: ./app
      Handler: bootstrap
      Runtime: provided.al2
      Role: !GetAtt LambdaFunctionRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          AllowUserAppToken: "1"

  FirebaseTokenAuthorizerAllowingAnonymousUser:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      FunctionName: !Sub ${AWS::StackName}-FirebaseTokenAuthorizerAllowingAnonymousUser
      CodeUri: ./app
      Handler: bootstrap
      Runtime: provided.al2
      Role: !GetAtt LambdaFunctionRole.Arn
      Architectures:
        - arm64
      Environment:
        Variables:
          AllowAnonymousUser: "1"

  # V2 API Gateway
  GenerateCertificateV2: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
          HostedZoneId: !Ref Route53ZoneId

  APIGatewayV2:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub ${AWS::StackName}-APIGatewayV2
      Domain:
        DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
        CertificateArn: !Ref GenerateCertificateV2
        Route53:
          HostedZoneId: !Ref Route53ZoneId
      # AccessLogSettings:
      #   DestinationArn: !GetAtt APIGatewayV2AccessLogs.Arn
      #   Format: $context.requestId $context.httpMethod $context.path $context.error.responseType $context.error.messageString $context.authorizer.error $context.integrationErrorMessage
      Auth: # Uses the FirebaseTokenAuthorizer to identify the session user.
        DefaultAuthorizer: FirebaseTokenAuthorizer
        Authorizers:
          FirebaseTokenAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            FunctionArn: !GetAtt FirebaseTokenAuthorizer.Arn
            FunctionInvokeRole: !GetAtt APIGatewayV2Role.Arn
            Identity:
              ReauthorizeEvery: 300
              Headers: ["Authorization"]
      CorsConfiguration:
        AllowMethods: ["*"]
        AllowHeaders: ["*"]
        AllowOrigins:
          - "http://localhost"
          - "http://localhost:8000"
          - "https://fastchargeapi.com"
          - "https://devfastchargeapi.com"
      DisableExecuteApiEndpoint: True

  # APIGatewayV2AccessLogs:
  #   Type: AWS::Logs::LogGroup

  APIGatewayV2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-APIGatewayV2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-APIGatewayV2Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "lambda:InvokeFunction"

  RefreshIdToken:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RefreshIdToken
      CodeUri: ./
      Handler: RefreshIdToken.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      MemorySize: 3008
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            ApiId: !Ref APIGatewayV2
            Path: /refresh-idtoken
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        UseNpmCi: True
        EntryPoints:
          - node/RefreshIdToken.ts

  LambdaFunctionRole: # Lambda functions will run as this role.
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaFunctionRole
      Description: "Role for Lambda functions"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - !Ref LambdaFunctionPolicy

  LambdaFunctionPolicy: # Lambda functions will run as this role.
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-LambdaFunctionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - ssm:GetParameter
