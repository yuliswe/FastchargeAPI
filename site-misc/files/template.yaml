AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: site-files

Parameters:
  MainDomain:
    Type: String
  Route53ZoneId:
    Type: String
  SubDomain:
    Type: String
    Default: "api.files."

Resources:
  FilesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-bucket
      PublicAccessBlockConfiguration:
        BlockPublicPolicy: false
        RestrictPublicBuckets: false

  FilesBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref FilesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: "Allow anyone to read object from FilesBucket"
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref FilesBucket, "/*"]]

  Certificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub "${SubDomain}${MainDomain}"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Sub "${SubDomain}${MainDomain}"
          HostedZoneId: !Ref Route53ZoneId

  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt FilesBucket.DomainName # Generated by the S3Bucket resource
            Id: Origin1
            S3OriginConfig:
              OriginAccessIdentity: ""
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: Origin1
          ForwardedValues:
            QueryString: "false"
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        Aliases:
          - !Sub "${SubDomain}${MainDomain}"
        DefaultRootObject: index.html
        ViewerCertificate:
          AcmCertificateArn: !Ref Certificate
          SslSupportMethod: sni-only
        PriceClass: PriceClass_100
