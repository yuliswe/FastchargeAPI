AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  gateway-service

  Sample SAM Template for gateway-service

Parameters:
  Stage:
    Type: String
    Default: DEV

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 2
    MemorySize: 3008
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  GenerateCertificate: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "*.fastchargeapi.com"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: "*.fastchargeapi.com"
          HostedZoneId: Z0358815GI2I8U5CTHXW

  GatewayAPI:
    Type: AWS::Serverless::Api
    Properties:
      Domain: # Configure the domain of the API
        DomainName: "*.fastchargeapi.com"
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId: Z0358815GI2I8U5CTHXW
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: ERROR
          MetricsEnabled: True
          ResourcePath: "/*" # allows for logging on any resource
          HttpMethod: "*" # allows for logging on any method
      Auth: # Uses the UserAppTokenAuthorizer to identify the session user.
        ApiKeyRequired: false
        DefaultAuthorizer: UserAppTokenAuthorizer
        Authorizers:
          UserAppTokenAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: arn:aws:lambda:us-east-1:887279901853:function:UserAppTokenAuthorizer
            Identity:
              ReauthorizeEvery: 300
              Headers: ["X-FAST-API-KEY"]

  CorsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ./cors
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Events:
        CORS_ROOT:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            Path: /
            Method: OPTIONS
            RestApiId: !Ref GatewayAPI
        CORS:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            Path: /{proxy+}
            Method: OPTIONS
            RestApiId: !Ref GatewayAPI

  GatewayFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: ./gateway
      Handler: bootstrap
      Runtime: provided.al2
      Architectures:
        - arm64
      Events:
        ANY_ROOT:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: GET
            RestApiId: !Ref GatewayAPI
        ANY:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /{proxy+}
            Method: GET
            RestApiId: !Ref GatewayAPI
      Policies:
        - AmazonAPIGatewayInvokeFullAccess # This will allow this lambda to send http request to the graphql api
        - AWSLambdaRole # This will allow this lambda to send http request to the graphql api
        - AmazonSQSFullAccess # Allows sending billing to the graphql service
      Environment: # More info about Env Vars: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#environment-object
        Variables:
          TRUST_X_USER_EMAIL_HEADER: "" # Set to 1 to bypass authentication
          TRUST_X_USER_PK_HEADER: "" # Set to 1 to bypass authentication
          LOCAL_GRAPHQL: "" # Set to 1 to use http://host.docker.internal:4000 as the graphql server

Outputs:
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  GatewayAPI:
    Description: "API Gateway endpoint URL for Prod environment for First Function"
    Value: !Sub "https://${GatewayAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
  GatewayFunction:
    Description: "First Lambda Function ARN"
    Value: !GetAtt GatewayFunction.Arn
  GatewayFunctionIamRole:
    Description: "Implicit IAM Role created for Hello World function"
    Value: !GetAtt GatewayFunctionRole.Arn
