scalar Email
scalar NonNegativeDecimal
scalar Timestamp
scalar URL
scalar Any
scalar Decimal
scalar DateTime

type Query {
  ### App
  getApp(pk: ID!): App!
  getAppByName(name: String!): App!
  listAppsByTag(tag: String!, limit: Int): [App!]!
  listAppsByOwner(owner: ID!, limit: Int): [App!]!
  appFullTextSearch(
    query: String
    tag: String # if provided, constrain the search to this tag
    orderBy: AppFullTextSearchOrderBy
    limit: Int
    offset: Int
  ): [App!]!

  ### User
  getUser(pk: ID!): User!
  getUserByEmail(email: Email!): User!

  ### Endpoint
  getEndpoint(pk: ID!): Endpoint!
  listEndpointsByApp(app: ID!): [Endpoint!]!
  getEndpointByApp(app: ID!, path: String!): Endpoint!

  ### Subscriptions
  getSubscription(pk: ID!): Subscribe!
  getSubscriptionByAppSubscriber(subscriber: ID!, app: ID!): Subscribe!

  ### User App Token
  getUserAppToken(pk: ID!): UserAppToken!
  getUserAppTokenBySubscriber(subscriber: ID!, app: ID): UserAppToken!

  ### Usage Log
  listUsageLogsBySubscriber(subscriber: ID!, app: ID, path: String, limit: Int, dateRange: DateRangeInput): [UsageLog!]!

  ### Usage Summary
  listUsageSummariesByAppSubscriber(
    subscriber: ID!
    app: ID!
    limit: Int = 1000 # Support maximum of 1000
    dateRange: DateRangeInput
  ): [UsageSummary!]!

  ### Pricing
  getPricing(pk: ID): Pricing!
  listPricingsByApp(app: ID!): [Pricing!]!

  ### Account Activity
  getAccountActivity(pk: ID!): AccountActivity!
  listAccountActivitiesByUser(
    user: ID!
    limit: Int # Support maximum of 1000
    dateRange: DateRangeInput
  ): [AccountActivity!]!
  listAccountActivitiesBySettleAt(
    user: ID!
    settleAt: DateRangeInput!
    status: AccountActivityStatus
  ): [AccountActivity!]!

  ### Account History
  getAccountHistory(pk: ID!): AccountHistory!
  listAccountHistoryByUser(
    user: ID!
    limit: Int # Support maximum of 1000
    dateRange: DateRangeInput
  ): [AccountHistory!]!

  ### Stripe Payment
  getStripePaymentAccept(pk: ID!): StripePaymentAccept!
  getStripePaymentAcceptByStripeSessionId(user: ID!, stripeSessionId: String!): StripePaymentAccept!

  ### Secret
  getSecret(key: String!): Secret!

  ### Stripe Transfer
  getStripeTransfer(pk: ID!): StripeTransfer!

  ### App Tags
  getAppTag(pk: ID!): AppTag!
  getAppTagByTag(app: ID!, tag: String!): AppTag!
  listAppTagsByApp(app: ID!): [AppTag!]!
  deleteAppTag(app: ID!, tag: String!): AppTag!

  ### Site Meta Data
  getSiteMetaDataByKey(key: String!): SiteMetaData!

  ### Others
  checkUserIsAllowedForGatewayRequest(
    user: ID!
    app: ID!
    _forceBalanceCheck: Boolean = false
    _forceAwait: Boolean = false
  ): GatewayDecisionResponse!

  # # Deprecated
  # apps(tag: String, limit: Int): [App!]! @deprecated(reason: "Use listApps() instead")
  # app(pk: ID, name: String): App! @deprecated(reason: "Use getApp() instead")
  # user(pk: ID, email: Email): User! @deprecated(reason: "Use getUser() instead")
  # endpoint(pk: ID, app: ID, path: String): Endpoint! @deprecated(reason: "Use getEndpoint() instead")
  # subscription(pk: ID, subscriber: ID, app: ID): Subscribe! @deprecated(reason: "Use getSubscription() instead")
  # pricing(pk: ID): Pricing! @deprecated(reason: "Use getPricing() instead")
  # secret(key: String!): Secret! @deprecated(reason: "Use getSecret() instead")
  # stripeTransfer(pk: ID): StripeTransfer! @deprecated(reason: "Use getStripeTransfer() instead")
  # appTags(tag: String): [AppTag!]! @deprecated(reason: "Use listAppTags() instead")
  # accountActivity(pk: ID): AccountActivity! @deprecated(reason: "Use getAccountActivity() instead")
  # siteMetaData(keys: [SiteMetaDataKey!]!): [SiteMetaData!]! @deprecated(reason: "Use getSiteMetaData() instead")
}

type Mutation {
  createUser(email: Email!): User! # For testing CLI only
  createApp(
    name: String!
    owner: ID!
    title: String
    gatewayMode: GatewayMode = proxy
    description: String
    repository: URL
    homepage: URL
    visibility: AppVisibility = public
    logo: URL
  ): App!
  createEndpoint(app: ID!, path: String!, method: HttpMethod!, destination: String!, description: String): Endpoint!
  createPricing(
    app: ID!
    name: String!
    minMonthlyCharge: NonNegativeDecimal!
    chargePerRequest: NonNegativeDecimal!
    freeQuota: Int!
    availability: PricingAvailability!
    callToAction: String
  ): Pricing!
  createSubscription(pricing: ID!, subscriber: ID!): Subscribe!
  createUsageLog(app: ID!, path: String!, subscriber: ID!, volume: Int! = 1, pricing: ID!): UsageLog!
  createStripeTransfer(receiver: ID!, withdrawAmount: NonNegativeDecimal!): StripeTransfer!
  createStripePaymentAccept(
    user: ID!
    amount: NonNegativeDecimal!
    stripePaymentStatus: String!
    stripePaymentIntent: String!
    stripeSessionId: String!
    stripeSessionObject: String!
    settleImmediately: Boolean!
  ): StripePaymentAccept!
  # Used by the gateway to trigger the billing flow
  triggerBilling(user: ID!, app: ID!): Boolean!
  _sqsTriggerBilling(user: ID!, app: ID!): [UsageSummary!]!
  createSecret(key: String!, value: String!, description: String, expireAt: Timestamp): Secret!
  createAccountActivity( # For testing CLI only
    user: ID!
    type: AccountActivityType!
    reason: AccountActivityReason!
    amount: NonNegativeDecimal!
    description: String!
    settleImmediately: Boolean!
    settleAt: Timestamp
  ): AccountActivity! @deprecated(reason: "No longer needed for testing CLI")
  flushAppSearchIndex: Int!
  createAppTag(app: ID!, tag: String!): AppTag!
  createSiteMetaData(key: String!, value: Any!): SiteMetaData!
  ping: Boolean!
  createUserAppToken(subscriber: ID!, app: ID!): UserAppToken!
  _sqsSettleAccountActivitiesForUser(user: ID!): Boolean!
}

enum AppFullTextSearchOrderBy {
  exact_match
  github_popularity
}

enum GatewayDecisionResponseReason {
  insufficient_balance
  owner_insufficient_balance
  pricing_not_available
  not_subscribed
  too_many_requests
  unknown
  failed_to_create_resource
}

type GatewayDecisionResponse {
  allowed: Boolean!
  reason: GatewayDecisionResponseReason
  pricingPK: String
  userPK: String
}

type Secret {
  pk: ID!
  key: String!
  value: String!
  expireAt: Timestamp
  createdAt: Timestamp!

  deleteSecret: Secret
}

type User {
  pk: ID!
  email: Email!
  author: String!
  subscriptions: [Subscribe!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  balance: String!
  balanceLimit: String!
  stripeCustomerId: String
  stripeConnectAccountId: String
  apps: [App!]!

  updateUser(author: String, stripeCustomerId: String, stripeConnectAccountId: String): User

  usageSummaries(
    app: ID!
    limit: Int = 1000 # Support maximum of 1000
    dateRange: DateRangeInput
  ): [UsageSummary!]! @deprecated(reason: "Use listUsageSummariesByAppSubscriber() instead")

  accountActivities(
    limit: Int = 1000 # Support maximum of 1000
    dateRange: DateRangeInput
  ): [AccountActivity!]! @deprecated(reason: "Use listAccountActivitiesByUser() instead")

  accountHistories(
    limit: Int = 1000 # Support maximum of 1000
    dateRange: DateRangeInput
  ): [AccountHistory!]! @deprecated(reason: "Use listAccountHistoryByUser() instead")

  getFastchargeAPIIdToken(expireInSeconds: Int = 3600): String!
}

input DateRangeInput {
  start: Timestamp
  end: Timestamp
}

enum SortDirection {
  ascending
  descending
}

type App {
  pk: ID!
  name: String!
  owner: User!
  title: String
  description: String
  gatewayMode: GatewayMode!
  repository: URL
  homepage: URL
  readme: URL
  updatedAt: DateTime!
  createdAt: DateTime!
  visibility: AppVisibility!
  logo: URL
  deleted: Boolean!
  deletedAt: DateTime

  endpoints: [Endpoint!]!
  pricingPlans: [Pricing!]!
  tags: [AppTag!]!

  updateApp(
    title: String
    description: String
    homepage: URL
    repository: URL
    readme: URL
    visibility: AppVisibility
    logo: URL
  ): App!

  deleteApp: App!
}

enum AppVisibility {
  public
  private
}

enum HttpMethod {
  GET
  POST
  PUT
  PATCH
  DELETE
  OPTIONS
  HEAD
}

type Endpoint {
  pk: String!
  app: App!
  path: String!
  description: String
  destination: String
  method: HttpMethod!
  createdAt: DateTime!
  updatedAt: DateTime!
  deleted: Boolean!
  deletedAt: DateTime

  updateEndpoint(method: HttpMethod, path: String, destination: String, description: String): Endpoint!

  deleteEndpoint: Endpoint!
}

type Pricing {
  pk: ID!
  app: App!
  name: String!
  callToAction: String!
  minMonthlyCharge: String!
  chargePerRequest: String!
  freeQuota: Int!
  availability: PricingAvailability!
  updatedAt: Timestamp!
  createdAt: Timestamp!

  deletePricing: Pricing!
  updatePricing(
    name: String
    callToAction: String
    minMonthlyCharge: NonNegativeDecimal
    chargePerRequest: NonNegativeDecimal
    freeQuota: Int
    availability: PricingAvailability
  ): Pricing!
}

type Subscribe {
  pk: String!
  pricing: Pricing!
  subscriber: User!
  app: App!
  createdAt: Timestamp!
  updatedAt: Timestamp!

  deleteSubscription: Subscribe
  updateSubscription(pricing: ID): Subscribe
}

enum UsageLogStatus {
  pending
  collected
}

type UsageLog {
  pk: ID!
  subscriber: User!
  app: App!
  path: String!
  pricing: Pricing!
  endpoint: Endpoint!
  volume: Int!
  createdAt: Timestamp!
  status: UsageLogStatus!
  collectedAt: Timestamp!
}

type UsageSummary {
  pk: ID!
  app: App!
  subscriber: User!
  volume: Int!
  billed: Boolean!
  status: UsageSummaryStatus!
  billedAt: Timestamp
  createdAt: Timestamp!
  billingRequestChargeAccountActivity: AccountActivity
}

enum UsageSummaryStatus {
  pending
  billed
  error
}

type StripePaymentAccept {
  pk: ID!
  user: User!
  amount: NonNegativeDecimal!
  currency: Currency!
  stripePaymentStatus: String!
  stripeSessionObject: String!
  stripePaymentIntent: String!
  stripeSessionId: String!
  status: StripePaymentAcceptStatus!
  createdAt: Timestamp!
  updatedAt: Timestamp!

  _sqsSettleStripePaymentAccept(
    stripePaymentStatus: String
    stripeSessionObject: String
    stripePaymentIntent: String
  ): StripePaymentAccept!
}

enum StripePaymentAcceptStatus {
  pending
  settled
  expired
}

enum GatewayMode {
  proxy
  redirect
}

enum StripeTransferStatus {
  created
  pending_transfer
  transferred
  failed_due_to_insufficient_balance
}

type StripeTransfer {
  pk: ID!
  receiver: User!
  withdrawAmount: NonNegativeDecimal!
  receiveAmount: NonNegativeDecimal!
  stripeTransferId: String
  stripeTransferObject: String
  createdAt: Timestamp!
  currency: Currency!
  transferAt: Timestamp!
  status: StripeTransferStatus

  _sqsSettleStripeTransfer: StripeTransfer!
}

enum AccountActivityType {
  outgoing
  incoming
}

enum AccountActivityReason {
  payout
  payout_fee
  topup
  api_per_request_charge
  api_min_monthly_charge
  api_min_monthly_charge_upgrade
  fastchargeapi_per_request_service_fee
  refund_api_min_monthly_charge
}

enum AccountActivityStatus {
  pending
  settled
  failed_due_to_insufficient_balance
}

type AccountActivity {
  pk: ID!
  user: User!
  createdAt: Timestamp!
  type: AccountActivityType!
  amount: String!
  reason: AccountActivityReason!
  description: String!
  stripeTransfer: StripeTransfer
  status: AccountActivityStatus
  settleAt: Timestamp!
  billedApp: App
  usageSummary: UsageSummary
  consumedFreeQuota: Int
}

type AccountHistory {
  pk: ID!
  user: User!
  startingTime: Timestamp!
  closingTime: Timestamp!
  startingBalance: Decimal!
  closingBalance: Decimal!
}

type UserAppToken {
  pk: ID!
  subscriber: User!
  app: App!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  signature: String!
  token: String

  deleteUserAppToken: UserAppToken!
}

type AppTag {
  pk: ID!
  app: App!
  tag: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!

  deleteAppTag: AppTag!
}

type SiteMetaData {
  key: String!
  value: Any!
  createdAt: Timestamp!
  updatedAt: Timestamp!

  deleteSiteMetaData: SiteMetaData!
  updateSiteMetaData(value: Any!): SiteMetaData!
}

enum SiteMetaDataKey {
  per_request_charge
  stripe_percentage_fee
  stripe_flat_fee
}

enum PricingAvailability {
  public
  existing_subscribers
}

enum Currency {
  usd
}
