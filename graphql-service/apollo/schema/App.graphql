scalar Email
scalar NonNegativeDecimal
scalar Timestamp

type Query {
    ### App API
    apps: [App]
    app(name: String): App!
    ### User API
    users: [User] # Get all users in the system
    user(email: Email): User!
    ### Endpoint API
    endpoint(pk: ID, app: String, path: String): Endpoint!
    endpoints: [Endpoint] # Get all endpoints in the system
    ### Subscriptions API
    subscription(pk: ID, subscriber: Email, app: String): Subscribe!

    stripePaymentAccept(stripeSessionId: String!): StripePaymentAccept!

    secret(key: String!): Secret!
}

type Mutation {
    createUser(email: Email!): User!

    createApp(
        name: String!
        owner: String!
        gatewayMode: GatewayMode = proxy
        description: String
        repository: String
        homepage: String
    ): App!

    createEndpoint(
        app: String!
        path: String!
        method: HTTPMethod!
        destination: String!
        description: String
    ): Endpoint!

    createPricing(
        app: String!
        name: String!
        callToAction: String!
        minMonthlyCharge: String!
        chargePerRequest: String!
    ): Pricing!

    createSubscription(
        app: String!
        pricing: ID!
        subscriber: Email!
    ): Subscribe!

    createUsageLog(
        app: String!
        path: String!
        subscriber: Email!
        volume: Int! = 1
    ): UsageLog!

    createStripePaymentAccept(
        user: String!
        amountCents: Int!
        currency: String!
        stripePaymentStatus: String!
        stripeSessionId: String!
        stripePaymentIntent: String!
        stripeSessionObject: String!
    ): StripePaymentAccept!

    createStripeTransfer(
        receiver: Email!
        withdrawCents: Int!
        receiveCents: Int!
        currency: String!
        stripeTransferId: String!
        stripeTransferObject: String!
    ): StripeTransfer!

    triggerBilling(user: ID!, app: ID!): UsageSummary

    createSecret(
        key: String!
        value: String!
        description: String
        expireAt: Timestamp
    ): Secret!
}

type Secret {
    key: String!
    value: String!
    expireAt: Timestamp
    createdAt: Timestamp!

    deleteSecret: Secret
}

type User {
    email: Email!
    author: String!
    apps: [App!]!
    subscriptions: [Subscribe!]!
    balance: String
    stripeCustomerId: String
    stripeConnectAccountId: String

    usageLogs(
        app: String
        path: String
        limit: Int = 5
        dateRange: DateRangeInput
    ): [UsageLog!]!

    updateUser(stripeCustomerId: String, stripeConnectAccountId: String): User

    usageSummaries(
        app: ID!
        limit: Int = 1000 # Support maximum of 1000
        dateRange: DateRangeInput
    ): [UsageSummary!]!

    accountActivities(
        limit: Int = 1000 # Support maximum of 1000
        dateRange: DateRangeInput
    ): [AccountActivity!]!

    accountHistories(
        limit: Int = 1000 # Support maximum of 1000
        dateRange: DateRangeInput
    ): [AccountHistory!]!
}

input DateRangeInput {
    start: Timestamp
    end: Timestamp
}

enum SortDirection {
    ascending
    descending
}

type App {
    name: String!
    description: String!
    owner: User!
    gatewayMode: GatewayMode!
    repository: String
    homepage: String

    endpoints: [Endpoint!]!
    ownedByYou: Boolean!
    pricingPlans: [Pricing!]!

    updateApp(description: String, gatewayMode: GatewayMode): App!
    deleteApp: App!
    createAppUserToken: String!
    revokeAppUserToken: Boolean!
}

enum HTTPMethod {
    ANY
    GET
    POST
    PUT
    PATCH
    DELETE
    OPTIONS
    HEAD
}

type Endpoint {
    pk: String!
    path: String!
    description: String
    destination: String
    method: HTTPMethod!
    createdAt: Timestamp!
    updatedAt: Timestamp!

    updateEndpoint(
        method: HTTPMethod
        path: String
        destination: String
        description: String
    ): Endpoint

    deleteEndpoint: Endpoint
}

type Pricing {
    pk: ID!
    app: App!
    name: String!
    callToAction: String!
    minMonthlyCharge: String!
    chargePerRequest: String!
    freeQuota: Int!

    deletePricing: Pricing
}

type Subscribe {
    pk: String!
    pricing: Pricing!
    subscriber: User!
    app: App!
    createdAt: Timestamp!
    updatedAt: Timestamp!

    deleteSubscription: Subscribe
    updateSubscription(pricing: ID): Subscribe
}

type UsageLog {
    subscriber: User!
    app: App!
    endpoint: Endpoint!
    volume: Int!
    createdAt: Timestamp!
    status: String!
    collectedAt: Timestamp!
}

type UsageSummary {
    app: App!
    subscriber: User!
    volume: Int!
    billed: Boolean!
    billedAt: Timestamp
    createdAt: Timestamp!
    billingAccountActivity: AccountActivity
}

type StripePaymentAccept {
    user: User!
    amountCents: Int!
    currency: String!
    stripePaymentStatus: String!
    stripeSessionObject: String!
    stripePaymentIntent: String!
    stripeSessionId: String!
    createdAt: Timestamp!

    updateStripePaymentAccept(
        stripePaymentStatus: String
        stripeSessionObject: String
    ): StripePaymentAccept

    settlePayment(stripeSessionObject: String!): StripePaymentAccept
}

enum GatewayMode {
    proxy
    redirect
}

type StripeTransfer {
    receiver: User!
    withdrawCents: Int!
    receiveCents: Int!
    stripeTransferId: String!
    stripeTransferObject: String!
    createdAt: Timestamp!
    currency: String
    settleStripeTransfer: StripeTransfer
}

enum AccountActivityType {
    credit
    debit
}
enum AccountActivityReason {
    payout
    topup
    api_per_request_charge
    api_min_monthly_charge
}
type AccountActivity {
    createdAt: Timestamp!
    type: AccountActivityType!
    amount: String!
    reason: AccountActivityReason!
    description: String!
}

type AccountHistory {
    closingBalance: String!
    closingTime: Timestamp!
}
