scalar Email
scalar Date
scalar NonNegativeDecimal
scalar Timestamp

type Query {
    ### App API
    apps: [App]
    app(name: String): App
    ### User API
    users: [User] # Get all users in the system
    user(email: Email): User
    ### Endpoint API
    endpoint(ref: ID, app: String, path: String): Endpoint
    endpoints: [Endpoint] # Get all endpoints in the system
    ### Subscriptions API
    subscription(subscriber: Email, app: String): Subscribe

    stripePaymentAccept(stripeSessionId: String!): StripePaymentAccept
}

type Mutation {
    createUser(email: Email!): User

    createApp(
        name: String!
        owner: String!
        gatewayMode: GatewayMode = Proxy
        # endpoints: [EndpointInput]
        description: String
    ): App

    createEndpoint(
        app: String!
        path: String!
        destination: String!
        description: String
    ): Endpoint

    createPricing(
        app: String!
        name: String!
        callToAction: String!
        minMonthlyCharge: String!
        chargePerRequest: String!
    ): Pricing

    createSubscription(
        app: String!
        pricing: ID!
        subscriber: Email!
    ): Subscribe

    createUsageLog(
        app: String!
        path: String!
        subscriber: Email!
        volume: Int! = 1
    ): UsageLog

    createStripePaymentAccept(
        user: String!
        amountCents: Int!
        currency: String!
        status: String!
        stripeSessionId: String!
        stripePaymentIntent: String!
        stripeSessionObject: String!
    ): StripePaymentAccept

    createStripeTransfer(
        receiver: Email!
        withdrawCents: Int!
        receiveCents: Int!
        currency: String!
        stripeTransferId: String!
        stripeTransferObject: String!
    ): StripeTransfer

    triggerBilling(user: ID!): UsageSummary
}

type User {
    email: Email!
    author: String!
    apps: [App]
    subscriptions: [Subscribe]
    balance: String
    stripeCustomerId: String
    stripeConnectAccountId: String

    usageLogs(
        app: String
        path: String
        limit: Int = 5
        start: Int = 0
    ): [UsageLog]

    updateUser(stripeCustomerId: String, stripeConnectAccountId: String): User

    usageSummaries: [UsageSummary]
}

type App {
    name: String!
    description: String
    owner: User
    endpoints: [Endpoint]
    ownedByYou: Boolean
    pricingPlans: [Pricing]
    gatewayMode: GatewayMode

    updateApp(description: String, gatewayMode: GatewayMode): App
    deleteApp: App
}

type Endpoint {
    path: String!
    description: String
    destination: String
    ref: String!

    updateEndpoint(
        path: String
        destination: String
        description: String
    ): Endpoint

    deleteEndpoint: Endpoint
}

type Pricing {
    pk: ID!
    app: App!
    name: String!
    callToAction: String!
    minMonthlyCharge: String!
    chargePerRequest: String!
    freeQuota: Int!

    deletePricing: Pricing
}

type Subscribe {
    pricing: Pricing!
    subscriber: User!
    app: App!
    createdAt: Int!

    deleteSubscription: Subscribe
}

type UsageLog {
    subscriber: User!
    app: App!
    endpoint: Endpoint!
    volume: Int!
    createdAt: Timestamp!
    status: String!
    collectedAt: Timestamp!
}

type UsageSummary {
    # subscriber: User!
    # volume: Int!
    # billed: Boolean!
    # billedAt: Timestamp
    createdAt: Timestamp!
}

type StripePaymentAccept {
    user: User!
    amountCents: Int!
    currency: String!
    status: String!
    stripeSessionObject: String!
    stripePaymentIntent: String!
    stripeSessionId: String!
    createdAt: Timestamp!

    settlePayment(stripeSessionObject: String!): StripePaymentAccept
}

enum GatewayMode {
    proxy
    redirect
}

type StripeTransfer {
    receiver: User!
    withdrawCents: Int!
    receiveCents: Int!
    stripeTransferId: String!
    stripeTransferObject: String!
    createdAt: Timestamp!
    oldBalance: String
    newBalance: String
    currency: String
    settleStripeTransfer: StripeTransfer
}
