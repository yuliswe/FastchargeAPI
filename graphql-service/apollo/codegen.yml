# This configuration file tells GraphQL Code Generator how
# to generate types based on our schema.
# documents:
#   - "./cron-jobs/*.ts"

projects:
  operations:
    schema: "./__generated__/Public.final.graphql"
    documents:
      - "./cron-jobs/*.ts"
      - "./functions/*.ts"
      - "./resolvers/*.ts"
      - "./pks/*.ts"
      - "./tests/**/*.ts"
    extensions:
      codegen:
        generates:
          # Specify where our generated types should live.
          ./__generated__/gql/:
            preset: client
            config:
              # namingConvention: keep

  resolvers:
    extensions:
      codegen:
        generates:
          ./__generated__/resolvers-types.ts:
            schema: "./__generated__/Public.final.graphql"
            plugins:
              - "typescript"
              - "typescript-resolvers"
              - "typescript-operations"
            config:
              typesPrefix: GQL
              useIndexSignature: true
              # More on this below!
              contextType: "../RequestContext#RequestContext"
              mapperTypeSuffix: "Data"
              # wrapFieldDefinitions: true
              # resolverTypeWrapperSignature: "{[k in keyof T]: (T[k] | ((args: any, context: RequestContext, info: GraphQLResolveInfo) => T[k]) | ((args: any, context: RequestContext, info: GraphQLResolveInfo) => Promise<T[k]>))}"
              useTypeImports: false
              # avoidOptionals: true
              makeResolverTypeCallable: true
              customResolveInfo: "@apollo/cache-control-types#GraphQLResolveInfoWithCacheControl"
              # defaultMapper: "{[k in keyof {T}]: {T}[k] | (() => {T})}"
              mappers:
                App: ../database/models/App#App
                AppTag: ../database/models/AppTag#AppTag
                User: ../database/models/User#User
                Endpoint: ../database/models/Endpoint#Endpoint
                Pricing: ../database/models/Pricing#Pricing
                Subscribe: ../database/models/Subscription#Subscription
                UsageLog: ../database/models/UsageLog#UsageLog
                StripePaymentAccept: ../database/models/StripePaymentAccept#StripePaymentAccept
                StripeTransfer: ../database/models/StripeTransfer#StripeTransfer
                AccountActivity: ../database/models/AccountActivity#AccountActivity
                AccountHistory: ../database/models/AccountHistory#AccountHistory
                UsageSummary: ../database/models/UsageSummary#UsageSummary
                Secret: ../database/models/Secret#Secret
                GatewayRequestCounter: ../database/models/GatewayRequestCounter#GatewayRequestCounter
                GatewayRequestDecisionCache: ../database/models/GatewayRequestDecisionCache#GatewayRequestDecisionCache
                UserAppToken: ../database/models/UserAppToken#UserAppToken
                SiteMetaData: ../database/models/SiteMetaData#SiteMetaData
              enumValues:
                GatewayMode: ../__generated__/gql/graphql#GatewayMode
                PricingAvailability: ../__generated__/gql/graphql#PricingAvailability
                HttpMethod: ../__generated__/gql/graphql#HttpMethod
                AccountActivityReason: ../__generated__/gql/graphql#AccountActivityReason
                AccountActivityStatus: ../__generated__/gql/graphql#AccountActivityStatus
                AccountActivityType: ../__generated__/gql/graphql#AccountActivityType
                SiteMetaDataKey: ../__generated__/gql/graphql#SiteMetaDataKey
                StripeTransferStatus: ../__generated__/gql/graphql#StripeTransferStatus
                UsageLogStatus: ../__generated__/gql/graphql#UsageLogStatus
                UsageSummaryStatus: ../__generated__/gql/graphql#UsageSummaryStatus
                StripePaymentAcceptStatus: ../__generated__/gql/graphql#StripePaymentAcceptStatus
                Currency: ../__generated__/gql/graphql#Currency
                AppVisibility: ../__generated__/gql/graphql#AppVisibility
                GatewayDecisionResponseReason: ../__generated__/gql/graphql#GatewayDecisionResponseReason
              scalars:
                Email: string
                Timestamp: number
                NonNegativeDecimal: string
                URL: string
                Any: unknown
