# This configuration file tells GraphQL Code Generator how
# to generate types based on our schema.
# documents:
#   - "./cron-jobs/*.ts"
schema: "./schema/App.graphql"
documents:
  - "./cron-jobs/*.ts"
  - "./functions/*.ts"
  - "./tests/**/*.ts"
generates:
  # Specify where our generated types should live.
  ./__generated__/gql/:
    preset: client
  ./__generated__/resolvers-types.ts:
    plugins:
      - "typescript"
      - "typescript-resolvers"
      - "typescript-operations"
    config:
      typesPrefix: GQL
      useIndexSignature: true
      # More on this below!
      contextType: "../RequestContext#RequestContext"
      mapperTypeSuffix: "Data"
      # makeResolverTypeCallable: true
      # wrapFieldDefinitions: true
      # resolverTypeWrapperSignature: "{[k in keyof T]: (T[k] | ((args: any, context: RequestContext, info: GraphQLResolveInfo) => T[k]) | ((args: any, context: RequestContext, info: GraphQLResolveInfo) => Promise<T[k]>))}"
      useTypeImports: true
      # avoidOptionals: true
      makeResolverTypeCallable: true
      customResolveInfo: "@apollo/cache-control-types#GraphQLResolveInfoWithCacheControl"
      # defaultMapper: "{[k in keyof {T}]: {T}[k] | (() => {T})}"
      mappers:
        App: ../dynamoose/models#App
        AppTag: ../dynamoose/models#AppTag
        User: ../dynamoose/models#User
        Endpoint: ../dynamoose/models#Endpoint
        Pricing: ../dynamoose/models#Pricing
        Subscribe: ../dynamoose/models#Subscription
        UsageLog: ../dynamoose/models#UsageLog
        StripePaymentAccept: ../dynamoose/models#StripePaymentAccept
        StripeTransfer: ../dynamoose/models#StripeTransfer
        AccountActivity: ../dynamoose/models#AccountActivity
        AccountHistory: ../dynamoose/models#AccountHistory
        UsageSummary: ../dynamoose/models#UsageSummary
        Secret: ../dynamoose/models#Secret
        GatewayRequestCounter: ../dynamoose/models#GatewayRequestCounter
        GatewayRequestDecisionCache: ../dynamoose/models#GatewayRequestDecisionCache
        UserAppToken: ../dynamoose/models#UserAppToken
        SiteMetaData: ../dynamoose/models#SiteMetaData
      enumValues:
        GatewayMode: ../dynamoose/models#GatewayMode
      scalars:
        Email: string
        Timestamp: number
        NonNegativeDecimal: string
        Any: any
