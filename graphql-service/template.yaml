AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  graphql-service

  Sample SAM Template for graphql-service

Parameters:
  ServicePrefix:
    Type: String
  MainDomain:
    Type: String
  Route53ZoneId:
    Type: String
  EnvDevDomain:
    Type: String
    Default: ""
  SubDomain:
    Type: String
    Default: "api.graphql."
  IAMSubDomain:
    Type: String
    Default: "api.iam.graphql."

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 3008
    Environment:
      Variables:
        DEV_DOMAIN: !Ref EnvDevDomain
    Tags:
      service-name: !Sub "${AWS::StackName}"
  Api:
    TracingEnabled: True
    MethodSettings:
      - LoggingLevel: INFO
        MetricsEnabled: True
        ResourcePath: "/*" # allows for logging on any resource
        HttpMethod: "*" # allows for logging on any method
    AccessLogSetting:
      DestinationArn: !GetAtt APIGatewayAccessLogGroup.Arn
      Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"
    GatewayResponses:
      UNAUTHORIZED: # This is hacky but right now the only way to handle an OPTION request without failing
        StatusCode: 200
        ResponseParameters:
          Headers:
            Access-Control-Allow-Methods: "'*'"
            Access-Control-Allow-Headers: "'*'"
            Access-Control-Allow-Origin: "'*'"

Resources:
  # Give account permission to log to CloudWatch. Probably only need once per
  # account.
  SetApiGatewayLoggingRole:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayLoggingRole.Arn

  # # IAM Role for API Gateway + CloudWatch Logging
  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Action: "sts:AssumeRole"
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  APIGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-APIGatewayAccessLogGroup"

  # This is a custom build layer. See:
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/building-layers.html
  CopyDependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./apollo
      CompatibleRuntimes:
        - nodejs18.x
    Metadata:
      BuildMethod: makefile # Required to have AWS SAM build this layer

  IAMGenerateCertificate: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", [!Ref IAMSubDomain, !Ref MainDomain]]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Join ["", [!Ref IAMSubDomain, !Ref MainDomain]]
          HostedZoneId: !Ref Route53ZoneId

  GenerateCertificate: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
          HostedZoneId: !Ref Route53ZoneId

  LambdaFunctionRole: # Lambda functions will run as this role.
    Type: AWS::IAM::Role
    Properties:
      Description: "Apollo GraphQL Service Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: GraphQLServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:ConditionCheckItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                  - "sqs:DeleteMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:SendMessage"
                  - "sqs:GetQueueAttributes"
                  - "kms:Decrypt"
                  - "rds-data:ExecuteSql"
                  - "rds-data:ExecuteStatement"
                  - "rds-data:BatchExecuteStatement"
                  - "rds-data:BeginTransaction"
                  - "rds-data:CommitTransaction"
                  - "rds-data:RollbackTransaction"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:ListSecrets"

  APIGatewayInvokeRole: # This role gives API Gateway permission to invoke all lambda functions
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: APIGatewayInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "lambda:InvokeFunction"

  # Create another gateway with IAM based authentication
  IAMAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-IAMAPIGateway"
      Domain:
        DomainName: !Join ["", [!Ref IAMSubDomain, !Ref MainDomain]]
        CertificateArn: !Ref IAMGenerateCertificate
        Route53:
          HostedZoneId: !Ref Route53ZoneId
      TracingEnabled: True
      DisableExecuteApiEndpoint: True
      StageName: !Ref ServicePrefix
      Auth:
        DefaultAuthorizer: AWS_IAM
        InvokeRole: !GetAtt APIGatewayInvokeRole.Arn
      Tags:
        service-name: !Sub "${AWS::StackName}"

  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${AWS::StackName}-APIGateway"
      Domain:
        DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId: !Ref Route53ZoneId
      TracingEnabled: True
      DisableExecuteApiEndpoint: True
      StageName: !Ref ServicePrefix
      Auth: # Uses the FirebaseTokenAuthorizerAllowingAnonymousUser to identify the session user.
        ApiKeyRequired: false
        DefaultAuthorizer: FirebaseTokenAuthorizerAllowingAnonymousUser
        InvokeRole: !GetAtt APIGatewayInvokeRole.Arn
        Authorizers:
          FirebaseTokenAuthorizerAllowingAnonymousUser:
            FunctionPayloadType: REQUEST
            FunctionInvokeRole: !GetAtt APIGatewayInvokeRole.Arn
            FunctionArn: !Sub arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${ServicePrefix}-auth-service-FirebaseTokenAuthorizerAllowingAnonymousUser
            Identity:
              ReauthorizeEvery: 300
              Headers: ["Authorization"]
      Tags:
        service-name: graphql-service

  ApolloServer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ApolloServer
      CodeUri: ./apollo
      Handler: lambdaHandler.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt LambdaFunctionRole.Arn
      Events:
        Get:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref APIGateway
        Post:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref APIGateway
        IAMGet:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref IAMAPIGateway
        IAMPost:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref IAMAPIGateway
      Environment:
        Variables:
          TRUST_X_USER_EMAIL_HEADER: "" # WARNING: Must not be trusted in production.
          TRUST_X_USER_PK_HEADER: "" # WARNING: Must not be trusted in production.
          TRUST_X_IS_SERVICE_REQUEST_HEADER: "" # WARNING: Must not be trusted in production.
          # AWS_LAMBDA_EXEC_WRAPPER: ""
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - lambdaHandler.ts

  SQSApolloServer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SQSApolloServer
      CodeUri: ./apollo
      Handler: sqsHandler.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt LambdaFunctionRole.Arn
      Timeout: 30
      Events:
        UsageLogQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt UsageLogQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
        BillingQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BillingQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - sqsHandler.ts

  UsageLogQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: graphql-service-usage-log-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UsageLogDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: service-name
          Value: graphql-service

  UsageLogDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: graphql-service-usage-log-dead-letter-queue
      VisibilityTimeout: 0
      Tags:
        - Key: service-name
          Value: graphql-service

  BillingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: graphql-service-billing-queue.fifo
      FifoQueue: true
      DelaySeconds: 0 # Delay so that the billing is triggered after the UsageLogs are created
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BillingDeadLetterQueue.Arn
        maxReceiveCount: 1
      Tags:
        - Key: service-name
          Value: graphql-service

  BillingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: graphql-service-billing-dead-letter-queue.fifo
      VisibilityTimeout: 0
      Tags:
        - Key: service-name
          Value: graphql-service

  SettleAccountActivitiesCronJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SettleAccountActivitiesCronJob
      CodeUri: ./apollo/cron-jobs
      Handler: settleAccountActivities.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt LambdaFunctionRole.Arn
      Timeout: 300
      Events:
        ScheduledTrigger:
          ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(6 hours)"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - settleAccountActivities.ts
