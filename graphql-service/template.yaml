AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  graphql-service

  Sample SAM Template for graphql-service

Parameters:
  Stage:
    Type: String
    Default: DEV

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    MemorySize: 3008
    Tags:
      service-name: graphql-service

Resources:
  NestedStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./template-dynamodb.yaml

  # This is a custom build layer. See:
  # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/building-layers.html
  CopyDependencies:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./apollo
      CompatibleRuntimes:
        - nodejs18.x
    Metadata:
      BuildMethod: makefile # Required to have AWS SAM build this layer

  GenerateIAMCertificate: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "api.iam.graphql.fastchargeapi.com"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: "api.iam.graphql.fastchargeapi.com"
          HostedZoneId: Z0358815GI2I8U5CTHXW

  GraphQLServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: "Apollo GraphQL Service Role"
      RoleName: GraphQLServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
        - arn:aws:iam::887279901853:policy/AuroraDBSearchServicePolicy
      Policies:
        - PolicyName: GraphQLServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Resource: "*"
                Action:
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:ConditionCheckItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:PutItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:UpdateItem"
                  - "ssm:GetParameter"
                  - "ssm:GetParameters"
                  - "ssm:GetParametersByPath"
                  - "sqs:DeleteMessage"
                  - "sqs:ReceiveMessage"
                  - "sqs:SendMessage"
                  - "sqs:GetQueueAttributes"

  # Create another gateway with IAM based authentication
  APIGatewayIAM:
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        DomainName: "api.iam.graphql.fastchargeapi.com"
        CertificateArn: !Ref GenerateIAMCertificate
        Route53:
          HostedZoneId: Z0358815GI2I8U5CTHXW
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: INFO
          MetricsEnabled: True
          ResourcePath: "/*" # allows for logging on any resource
          HttpMethod: "*" # allows for logging on any method
      Auth:
        DefaultAuthorizer: AWS_IAM

  ApolloServerIAM:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./apollo
      Handler: lambdaHandler.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt GraphQLServiceRole.Arn
      Events:
        PostIAM:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref APIGatewayIAM
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - lambdaHandler.ts

  GenerateCertificate: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: "api.graphql.fastchargeapi.com"
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: "api.graphql.fastchargeapi.com"
          HostedZoneId: Z0358815GI2I8U5CTHXW

  APIGateway:
    Type: AWS::Serverless::Api
    Properties:
      Domain:
        DomainName: "api.graphql.fastchargeapi.com"
        CertificateArn: !Ref GenerateCertificate
        Route53:
          HostedZoneId: Z0358815GI2I8U5CTHXW
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: INFO
          MetricsEnabled: True
          ResourcePath: "/*" # allows for logging on any resource
          HttpMethod: "*" # allows for logging on any method
      Auth: # Uses the FirebaseTokenAuthorizerAllowingAnonymousUser to identify the session user.
        ApiKeyRequired: false
        DefaultAuthorizer: FirebaseTokenAuthorizerAllowingAnonymousUser
        Authorizers:
          FirebaseTokenAuthorizerAllowingAnonymousUser:
            FunctionPayloadType: REQUEST
            FunctionArn: arn:aws:lambda:us-east-1:887279901853:function:FirebaseTokenAuthorizerAllowingAnonymousUser
            Identity:
              ReauthorizeEvery: 300
              Headers: ["Authorization"]
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      GatewayResponses:
        UNAUTHORIZED: # This is hacky but right now the only way to handle an OPTION request without failing
          StatusCode: 200
          ResponseParameters:
            Headers:
              Access-Control-Allow-Methods: "'*'"
              Access-Control-Allow-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
      Tags:
        service-name: graphql-service

  ApolloServer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: ./apollo
      Handler: lambdaHandler.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt GraphQLServiceRole.Arn
      Events:
        Get:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref APIGateway
        Post:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref APIGateway
      Environment:
        Variables:
          TRUST_X_USER_EMAIL_HEADER: "" # WARNING: Must not be trusted in production.
          TRUST_X_USER_PK_HEADER: "" # WARNING: Must not be trusted in production.
          TRUST_X_IS_SERVICE_REQUEST_HEADER: "" # WARNING: Must not be trusted in production.
          # AWS_LAMBDA_EXEC_WRAPPER: ""
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - lambdaHandler.ts

  SQSApolloServer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./apollo
      Handler: sqsHandler.handler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt GraphQLServiceRole.Arn
      Timeout: 30
      Events:
        UsageLogQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt UsageLogQueue.Arn
            BatchSize: 10
            MaximumBatchingWindowInSeconds: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
        BillingQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt BillingQueue.Arn
            BatchSize: 10
            FunctionResponseTypes:
              - ReportBatchItemFailures
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - sqsHandler.ts

  UsageLogQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: graphql-service-usage-log-queue
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UsageLogDeadLetterQueue.Arn
        maxReceiveCount: 3
      Tags:
        - Key: service-name
          Value: graphql-service

  UsageLogDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: graphql-service-usage-log-dead-letter-queue
      VisibilityTimeout: 0
      Tags:
        - Key: service-name
          Value: graphql-service

  BillingQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: graphql-service-billing-queue.fifo
      FifoQueue: true
      DelaySeconds: 0 # Delay so that the billing is triggered after the UsageLogs are created
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt BillingDeadLetterQueue.Arn
        maxReceiveCount: 1
      Tags:
        - Key: service-name
          Value: graphql-service

  BillingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: true
      QueueName: graphql-service-billing-dead-letter-queue.fifo
      VisibilityTimeout: 0
      Tags:
        - Key: service-name
          Value: graphql-service

  SettleAccountActivitiesCronJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./apollo/cron-jobs
      Handler: settleAccountActivities.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt GraphQLServiceRole.Arn
      Timeout: 300
      Events:
        ScheduledTrigger:
          ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpression: "rate(6 hours)"
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - settleAccountActivities.ts
# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   APIGateway:
#     Description: "API Gateway endpoint URL"
#     Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
#   ApolloServer:
#     Description: "ApolloServer ARN"
#     Value: !GetAtt ApolloServer.Arn
#   ApolloServerIamRole:
#     Description: "Implicit IAM Role created (ApolloServerRole)"
#     Value: !GetAtt ApolloServerRole.Arn
