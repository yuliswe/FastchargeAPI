AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  resource-service

  Sample SAM Template for resource-service

Parameters:
  Stage:
    Type: String
    Default: DEV
  GatewayHostName:
    Type: String
    Default: "api.payment.fastchargeapi.com"
  GatewayHostNameV2:
    Type: String
    Default: "api.v2.payment.fastchargeapi.com"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: true

Resources:
  GenerateCertificateV2: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref GatewayHostNameV2
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref GatewayHostNameV2
          HostedZoneId: Z0358815GI2I8U5CTHXW

  APIGatewayV2:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        DomainName: !Ref GatewayHostNameV2
        CertificateArn: !Ref GenerateCertificateV2
        Route53:
          HostedZoneId: Z0358815GI2I8U5CTHXW
      # AccessLogSettings:
      #   DestinationArn: !GetAtt APIGatewayV2AccessLogs.Arn
      #   Format: $context.requestId $context.httpMethod $context.path $context.error.responseType $context.error.messageString $context.authorizer.error $context.integrationErrorMessage
      Auth: # Uses the FirebaseTokenAuthorizer to identify the session user.
        DefaultAuthorizer: FirebaseTokenAuthorizer
        Authorizers:
          FirebaseTokenAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            FunctionArn: arn:aws:lambda:us-east-1:887279901853:function:FirebaseTokenAuthorizer
            FunctionInvokeRole: !GetAtt APIGatewayV2Role.Arn
            Identity:
              ReauthorizeEvery: 300
              Headers: ["Authorization"]
      CorsConfiguration:
        AllowMethods: ["*"]
        AllowHeaders: ["*"]
        AllowOrigins:
          - "http://localhost"
          - "http://localhost:8000"
          - "https://fastchargeapi.com"
      DisableExecuteApiEndpoint: True

  # APIGatewayV2AccessLogs:
  #   Type: AWS::Logs::LogGroup

  APIGatewayV2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Tags:
        - Key: lambda:createdBy
          Value: SAM

  LambdaInvocationPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaInvocationPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action: lambda:InvokeFunction
            Resource: arn:aws:lambda:us-east-1:887279901853:function:FirebaseTokenAuthorizer
      Roles:
        - !Ref APIGatewayV2Role

  ExecuteDailyStripeTransferCronJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cron-jobs
      Handler: ExecuteDailyStripeTransfer.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Policies:
        - AWSLambdaRole
        - AmazonDynamoDBFullAccess # Give the Lambda service access to poll your DynamoDB Stream
      ReservedConcurrentExecutions: 1
      Timeout: 60
      MemorySize: 3008
      Events:
        ScheduledTrigger12AM:
          ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpressionTimezone: America/Toronto
            ScheduleExpression: "cron(0 0 * * ? *)"
            Input: '{"dryRun": true}'
        ScheduledTrigger8PM:
          ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpressionTimezone: America/Toronto
            ScheduleExpression: "cron(0 20 * * ? *)"
            Input: '{"dryRun": false}'
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - ExecuteDailyStripeTransfer.ts

  SendStripeDashboardLink:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/
      Handler: SendStripeDashboardLink.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      MemorySize: 512
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AmazonDynamoDBReadOnlyAccess # For looking up user's stripe id
        - AmazonSESFullAccess # For ending email to user
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /send-stripe-login-link
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - SendStripeDashboardLink.ts

  GetOnBoardLink:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/
      Handler: GetOnBoardLink.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      MemorySize: 512
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AmazonDynamoDBReadOnlyAccess # For looking up user's stripe id
        - AmazonSSMReadOnlyAccess # Need to get credentials for the Stripe API
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /get-onboard-link
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - GetOnBoardLink.ts

  AcceptPayment:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/
      Handler: AcceptPayment.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      MemorySize: 3008
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AmazonDynamoDBFullAccess # Create and update order, user
        - AmazonSSMReadOnlyAccess # Need to get credentials for the Stripe API
        - AmazonSQSFullAccess # Need to send SQS billing request to settle stripePaymentAccept
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            ApiId: !Ref APIGatewayV2
            Path: /accept-payment
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - AcceptPayment.ts

  GetCheckoutLink:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/
      Handler: GetCheckoutLink.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      MemorySize: 512
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AmazonDynamoDBFullAccess # Create and update order
        - AmazonSSMReadOnlyAccess # Need to get credentials for the Stripe API
        - AmazonSQSFullAccess # Need to send SQS billing request to settle stripePaymentAccept
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /get-checkout-link
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - GetCheckoutLink.ts

  CreateStripeTransfer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/
      Handler: CreateStripeTransfer.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      MemorySize: 512
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AmazonDynamoDBFullAccess # Create and update order
        - AmazonSSMReadOnlyAccess # Need to get credentials for the Stripe API
        - AmazonSQSFullAccess # Need to send SQS billing request to settle stripePaymentAccept
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /create-stripe-transfer
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - CreateStripeTransfer.ts

  FinishOnboard:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: handlers/
      Handler: FinishOnboard.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      MemorySize: 512
      Timeout: 10
      Policies:
        - AWSLambdaRole
        - AmazonDynamoDBFullAccess # Update user for connect account id
        - AmazonSSMReadOnlyAccess # Need to get credentials for the Stripe API
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            ApiId: !Ref APIGatewayV2
            Path: /finish-onboard
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Target: "es2022"
        EntryPoints:
          - FinishOnboard.ts
# Outputs:
#   APIGateway:
#     Description: API APIGateway endpoint URL for DEV stage for Hello World function
#     Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/echo"
