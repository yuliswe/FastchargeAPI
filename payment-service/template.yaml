AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  resource-service

  Sample SAM Template for resource-service

Parameters:
  ServicePrefix:
    Type: String
  MainDomain:
    Type: String
  Route53ZoneId:
    Type: String
  EnvDevDomain:
    Type: String
    Default: ""
  SubDomain:
    Type: String
    Default: "api.v2.payment."

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
    Environment:
      Variables:
        DEV_DOMAIN: !Ref EnvDevDomain
  Api:
    TracingEnabled: true

Resources:
  GenerateCertificateV2: # Creates a valid certificate for the HTTP API endpoint under the custom domain
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
          HostedZoneId: !Ref Route53ZoneId

  LambdaFunctionRole: # Lambda functions will run as this role.
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-LambdaFunctionRole
      Description: "Role for Lambda functions"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
        - !Ref LambdaFunctionPolicy

  LambdaFunctionPolicy: # Lambda functions will run as this role.
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${AWS::StackName}-LambdaFunctionPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Resource: "*"
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:ConditionCheckItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:GetRecords"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:UpdateItem"
              # Need to get credentials for the Stripe API
              - "ssm:GetParameter"
              - "ssm:GetParameters"
              - "ssm:GetParametersByPath"
              - "sqs:SendMessage"
              - "sqs:GetQueueAttributes"
              - "ses:SendEmail"

  APIGatewayV2:
    Type: AWS::Serverless::HttpApi
    Properties:
      Name: !Sub ${AWS::StackName}-APIGatewayV2
      Domain:
        DomainName: !Join ["", [!Ref SubDomain, !Ref MainDomain]]
        CertificateArn: !Ref GenerateCertificateV2
        Route53:
          HostedZoneId: !Ref Route53ZoneId
      AccessLogSettings:
        DestinationArn: !GetAtt APIGatewayV2AccessLogGroup.Arn
        Format: $context.requestId $context.httpMethod $context.path $context.error.responseType $context.error.messageString $context.authorizer.error $context.integrationErrorMessage
      Auth: # Uses the FirebaseTokenAuthorizer to identify the session user.
        DefaultAuthorizer: FirebaseTokenAuthorizer
        Authorizers:
          FirebaseTokenAuthorizer:
            AuthorizerPayloadFormatVersion: 2.0
            FunctionArn: !Sub arn:aws:lambda:us-east-1:${AWS::AccountId}:function:${ServicePrefix}-auth-service-FirebaseTokenAuthorizer
            FunctionInvokeRole: !GetAtt APIGatewayV2InvocationRole.Arn
            Identity:
              ReauthorizeEvery: 300
              Headers: ["Authorization"]
      CorsConfiguration:
        AllowMethods: ["*"]
        AllowHeaders: ["*"]
        AllowOrigins:
          - "http://localhost"
          - "http://localhost:8000"
          - "https://devfastchargeapi.com"
          - "https://fastchargeapi.com"
      DisableExecuteApiEndpoint: True

  APIGatewayV2AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${AWS::StackName}-APIGatewayV2AccessLogGroup"

  APIGatewayV2InvocationRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-APIGatewayV2InvocationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-APIGatewayV2InvocationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: "*"

  ExecuteDailyStripeTransferCronJob:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ExecuteDailyStripeTransferCronJob
      CodeUri: ./
      Handler: ExecuteDailyStripeTransfer.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64
      Role: !GetAtt LambdaFunctionRole.Arn
      ReservedConcurrentExecutions: 1
      Timeout: 60
      MemorySize: 3008
      Events:
        ScheduledTrigger12AM:
          ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpressionTimezone: America/Toronto
            ScheduleExpression: "cron(0 0 * * ? *)"
            Input: '{"dryRun": true}'
        ScheduledTrigger8PM:
          ScheduleEvent:
          Type: ScheduleV2
          Properties:
            ScheduleExpressionTimezone: America/Toronto
            ScheduleExpression: "cron(0 20 * * ? *)"
            Input: '{"dryRun": false}'
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - cron-jobs/ExecuteDailyStripeTransfer.ts

  SendStripeDashboardLink:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-SendStripeDashboardLink
      CodeUri: ./
      Handler: SendStripeDashboardLink.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 512
      Timeout: 10
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /send-stripe-login-link
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - handlers/SendStripeDashboardLink.ts

  GetStripeOnBoardLink:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetStripeOnBoardLink
      CodeUri: ./
      Handler: GetStripeOnBoardLink.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 512
      Timeout: 10
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /get-stripe-onboard-link
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - handlers/GetStripeOnBoardLink.ts

  AcceptStripePayment:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-AcceptStripePayment
      CodeUri: ./
      Handler: AcceptStripePayment.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 3008
      Timeout: 10
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            ApiId: !Ref APIGatewayV2
            Path: /accept-stripe-payment
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        Loader:
          - .hbs=file
        EntryPoints:
          - handlers/AcceptStripePayment.ts

  GetStripeCheckoutLink:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetStripeCheckoutLink
      CodeUri: ./
      Handler: GetStripeCheckoutLink.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 512
      Timeout: 10
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /get-stripe-checkout-link
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - handlers/GetStripeCheckoutLink.ts

  CreateStripeTransfer:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-CreateStripeTransfer
      CodeUri: ./
      Handler: CreateStripeTransfer.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 512
      Timeout: 10
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            ApiId: !Ref APIGatewayV2
            Path: /create-stripe-transfer
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - handlers/CreateStripeTransfer.ts

  FinishStripeOnboard:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${AWS::StackName}-FinishStripeOnboard
      CodeUri: ./
      Handler: FinishStripeOnboard.lambdaHandler
      Runtime: nodejs18.x
      Architectures:
        - arm64 # if you are using Apple M1
      Role: !GetAtt LambdaFunctionRole.Arn
      MemorySize: 512
      Timeout: 10
      Events:
        POST:
          Type: HttpApi # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Auth:
              Authorizer: NONE
            ApiId: !Ref APIGatewayV2
            Path: /finish-stripe-onboard
            Method: post
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        UseNpmCi: True
        Target: "es2022"
        EntryPoints:
          - handlers/FinishStripeOnboard.ts
